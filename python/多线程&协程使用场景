并行 和 并发：
并行：多个CPU核心，不同的程序就分配给不同的CPU来运行。可以让多个程序同时执行。(真正的同时)
并发：单个CPU核心，在一个时间切片里一次只能运行一个程序，如果需要运行多个程序，则串行执行(交替)。

多进程/多线程：
进程：每个进程都有自己独立的内存空间，不同进程之间的内存空间不共享。
      进程之间的通信有操作系统传递，导致通讯效率低，切换开销大。
线程：一个进程可以有多个线程，所有线程共享进程的内存空间，通讯效率高，切换开销小。
      共享意味着竞争，导致数据不安全，为了保护内存空间的数据安全，引入"互斥锁"。
  例子：一个4核心的机器，运行5个Thread，有一个核心跑了2个线程，他们在轮替要CPU执行上下文切换。
      其余核心都是跑一个线程，【对于这个进程来说】，就是并行 parallel 中夹杂并发concurrence。
      
协程：协程看上去也是子程序，但执行过程中，在子程序内部可中断，然后转而执行别的子程序，在适当的时候再返回来接着执行
     也可以并发的执行多线逻辑，但完全不会给cpu带来额外负担，且不存在任何资源竞争（并发），适用异步IO(IO密集型)，效率高于多线程(此时)
     那些需要计算，可能在同一帧内做大量运算的事情，就无法靠协程去并发。因为他们也会加大主线程在一帧内的计算量，一样会造成卡帧(计算密集型)

Python的多线程：GIL全局解释器锁，同一个时间切片只能运行一个线程，不能做到高并行，但是可以做到高并发(单核)
